
/*
========================================================================================
  Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    
    // Max requirements
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
} 

includeConfig 'config/base.config'
profiles {
    secure_lustre {
        process.executor = 'local'
        process.shell = ['/bin/bash', '-euo', 'pipefail']
        
        docker {
        enabled = true
        runOptions = '-u $(id -u):$(id -g)'
        }
        singularity {
            enabled    = false
            autoMounts = false
        }
        process {
            withName: ANNOTATE_VARIANTS {
            container = "ensemblorg/ensembl-vep:release_103.1"
            }
            withName: FILTER_VARIANTS {
            container = "quay.io/biocontainers/bcftools:1.20--h8b25389_0"
            }
        }
    }

    farm22 {
        process.executor = 'lsf'
        process.shell = ['/bin/bash', '-euo', 'pipefail']
        singularity.runOptions = "--bind /lustre"

        docker {
        enabled = false
        }
        singularity {
            enabled    = true
            autoMounts = true
            cacheDir = '/lustre/scratch127/casm/projects/dermatlas/singularity_images'
            registry = 'gitlab-registry.internal.sanger.ac.uk'
            username = System.getenv('SINGULARITY_DOCKER_USERNAME')
            password = System.getenv('SINGULARITY_DOCKER_PASSWORD')
            }
        executor {
            name = 'lsf'
            perJobMemLimit = true
            poolSize = 4
            submitRateLimit = '5 sec'
            killBatchSize = 50
        }
        params {
            baitset = "/lustre/scratch127/casm/projects/dermatlas/resources/baitset/DNA/GRCh38_WES5_canonical_pad100.merged.bed"
            vep_cache = "/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/cache/103"
            reference_genome = "/lustre/scratch124/resources/dermatlas/germline/genome.fa"
            custom_files = "/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/cosmic/v97/CosmicV97Coding_Noncoding.normal.counts.vcf.gz{,.tbi};/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/clinvar/20230121/clinvar_20230121.chr.canonical.vcf.gz{,.tbi};/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/dbsnp/155/dbSNP155.GRCh38.GCF_000001405.39.mod.vcf.gz{,.tbi};/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/gnomad/v3.1.2/gnomad.genomes.v3.1.2.short.vcf.gz{,.tbi}"
            custom_args = "CosmicV97Coding_Noncoding.normal.counts.vcf.gz,Cosmic,vcf,exact,0,CNT;clinvar_20230121.chr.canonical.vcf.gz,ClinVar,vcf,exact,0,CLNSIG,CLNREVSTAT;dbSNP155.GRCh38.GCF_000001405.39.mod.vcf.gz,dbSNP,vcf,exact,0;gnomad.genomes.v3.1.2.short.vcf.gz,gnomAD,vcf,exact,0,FLAG,AF"
            nih_germline_resource = "/lustre/scratch127/casm/projects/dermatlas/resources/germline/national_genomic_test_germline_cancer_genes/output/Cancer_national_genomic_test_directory_v7.2_June_2023_gene_smv_summary.tsv"
            cancer_gene_census_resource = "/lustre/scratch127/casm/projects/dermatlas/resources/COSMIC/cancer_gene_census.v97.genes.tsv"
            flag_genes = "/lustre/scratch127/casm/projects/dermatlas/resources/germline/FLAG_genes_maftools.tsv"
            species = "homo_sapiens"
            filter_col = "gnomAD_AF"
            db_name = "103"
            assembly = "GRCh38"
            outdir = "results"
            samples_to_process = -1
            run_mode = "sort_inputs"
            run_markDuplicates = true
            run_coord_sort_cram = true
            run_deepvariant = false
            run_haplotypecaller = true
            publish_intermediates = false
            alternative_transcripts = "/lustre/scratch127/casm/projects/dermatlas/resources/ensembl/dermatlas_noncanonical_transcripts_ens103.tsv"
            }
        process {
        queue = { task.time < 12.h ? 'normal' : task.time < 48.h ? 'long' : 'basement' }
        
        withLabel: gatk_steps {
            memory = 40.GB
            container = "file:///software/team113/dermatlas/singularity_images/gatk__4.2.6.1.sif"
        }
        withName: GENERATE_GENOMICS_DB {
            cpus = 8
            memory = 32.GB
        }
        withName: GATK_GVCF_PER_CHROM {
            cpus = 6
            memory = 16.GB
        }
        withName: MERGE_COHORT_VCF {
            cpus = 8
            memory = 16.GB
        }
        withName: ANNOTATE_VARIANTS {
            container = "docker://ensemblorg/ensembl-vep:release_104.0"
            memory = 40.GB
            cpus = 8
        }
        withName: MARK_VARIANTS {
            memory = 16.GB
            cpus = 8
        }
        withName: SELECT_VARIANTS {
            memory = 16.GB
            cpus = 8
        }
        withName: FILTER_VARIANTS {
            module = "bcftools-1.9/python-3.11.6"
            memory = 4.GB
            cpus = 2
        }
        withName: CREATE_DICT {
            memory = 40.GB
        }

            cpus = 2
            memory = 4.GB
        }
        withName: sort_cram {
            container = "docker://quay.io-biocontainers-sambamba-1.0.1--h6f6fda4_2"
            cpus = 8
            memory = '18G'
            time='400m'
        }
        withName: markDuplicates {
            container  = 'file:///software/team113/dermatlas/singularity_images/gatk__4.2.6.1.sif'
            errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
            maxRetries = 3
            memory = '18G'
            cpus = 6
            time='600m'
        }
        withName: coord_sort_cram {
            container = "docker://quay.io-biocontainers-sambamba-1.0.1--h6f6fda4_2"
            errorStrategy = { (task.attempt <= maxRetries)  ? 'retry' : 'ignore' }
            maxRetries = 3
            memory = '18G'
            cpus = 8
            time='600m'
        }
        withName: bam_to_cram {
            container  = 'file:///software/team113/dermatlas/singularity_images/samtools-1.10.sif'
            maxRetries = 3
            memory = '18G'
            cpus = 8
            time='400m'
        }
        withName: deepvariant {
            container  = 'file:///software/team113/dermatlas/singularity_images/deepvariant_0.10_UKB.sif'
            cpus = 2
            memory = '20G'
        }
        withName: gatk_haplotypecaller {
            container  = 'file:///software/team113/dermatlas/singularity_images/gatk__4.2.6.1.sif'
            errorStrategy = 'retry'
            cpus = 6
            memory = '30G'
        }

    }
}


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
tracedir = "pipeline_info"

report {
    enabled = true
    file    = "execution_report_${trace_timestamp}.html"
}


manifest {
    name            = 'dermatlas_germlinepost'
    author          = 'Martin Del Castillo Velasco-Herrera, Jamie Billington'
    homePage        = 'https://gitlab.internal.sanger.ac.uk/DERMATLAS/analysis-methods/dermatlas_germlinepost_nf'
    description     = ''
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.04.5'
    version         = '0.3.1'
    defaultBranch   = 'develop'
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}