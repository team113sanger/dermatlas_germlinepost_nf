
/*
========================================================================================
  Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    
    // Max requirements
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
} 

profiles {
    secure_lustre {
        process.executor = 'local'
        
        docker {
        enabled = true
        runOptions = '-u $(id -u):$(id -g)'
        }
        singularity {
            enabled    = false
            autoMounts = false
        }
        process {
            withName: ANNOTATE_VARIANTS {
            container = "ensemblorg/ensembl-vep:release_103.1"
            }
            withName: FILTER_VARIANTS {
            container = "quay.io/biocontainers/bcftools:1.20--h8b25389_0"
            }
        }
    }

    farm22 {
        process.executor = 'lsf'
        singularity.runOptions = "--bind /lustre"

        docker {
        enabled = false
        }
        singularity {
            enabled    = true
            autoMounts = true
            cacheDir = '/lustre/scratch125/casm/team113da/singularity_cache/dermatlas'
            registry = 'gitlab-registry.internal.sanger.ac.uk'
            username = System.getenv('SINGULARITY_DOCKER_USERNAME')
            password = System.getenv('SINGULARITY_DOCKER_PASSWORD')
            }
        executor {
            name = 'lsf'
            perJobMemLimit = true
            poolSize = 4
            submitRateLimit = '5 sec'
            killBatchSize = 50
        }
        params{
            reference_genome = "/lustre/scratch124/casm/team113/ref/DERMATLAS/GRCh38_full_analysis_set_plus_decoy_hla/genome.fa"
            baitset = "/lustre/scratch125/casm/team113da/projects/DERMATLAS/metadata/references/baitset/DNA/GRCh38_WES5_canonical_pad100.merged.bed"
            vep_cache = "/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/cache/103"
            vep_config = "${baseDir}/assets/vep_config.ini"
            gnomad_file = "/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/gnomad/v3.1.2/gnomad.genomes.v3.1.2.short.vcf.gz{,.tbi}"
            dbsnp_file = "/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/dbsnp/155/dbSNP155.GRCh38.GCF_000001405.39.mod.vcf.gz{,.tbi}"
            clinvar_file = "/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/clinvar/20230121/clinvar_20230121.chr.canonical.vcf.gz{,.tbi}"
            cosmic_file = "/lustre/scratch124/casm/team78pipelines/reference/human/GRCh38_full_analysis_set_plus_decoy_hla/vep/cosmic/v97/CosmicV97Coding_Noncoding.normal.counts.vcf.gz{,.tbi}"
        }
        process {
        withLabel: gatk_steps {
            memory = 40.GB
            container = "file:///software/team113/dermatlas/singularity_images/gatk__4.2.6.1.sif"
        }
        withName: GENERATE_GENOMICS_DB {
            cpus = 8
            memory = 32.GB
        }
        withName: GATK_GVCF_PER_CHROM {
            cpus = 6
            memory = 16.GB
        }
        withName: MERGE_COHORT_VCF {
            cpus = 8
            memory = 16.GB
        }
        withName: ANNOTATE_VARIANTS {
            module = "ensembl_vep/103.1"
        }
        withName: FILTER_VARIANTS {
            module = "bcftools-1.9/python-3.11.6"
        }
        withName: CREATE_DICT {
            memory = 40.GB
        }
    }
}
}


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
tracedir = "pipeline_info"

report {
    enabled = true
    file    = "execution_report_${trace_timestamp}.html"
}


manifest {
    name            = 'dermatlas_germlinepost'
    author          = 'Martin Del Castillo Velasco-Herrera, Jamie Billington'
    homePage        = 'https://gitlab.internal.sanger.ac.uk/DERMATLAS/analysis-methods/dermatlas_germlinepost_nf'
    description     = ''
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.04.5'
    version         = '0.0.1'
    defaultBranch   = 'develop'
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}